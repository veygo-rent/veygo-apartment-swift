name: iOS starter workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and Test on iPhone Simulator
    runs-on: macos-latest
    strategy:
      matrix:
        xcode-version: [15.4]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Select Xcode ${{ matrix.xcode-version }}
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode-version }}.app

      - name: List schemes
        id: list-schemes
        run: |
          set -e
          raw=$(xcodebuild -list -json)
          echo "$raw" | jq . >/dev/null
          default=$(echo "$raw" | jq -r '.project.targets[0]')
          echo "Default scheme: $default"
          echo "::set-output name=scheme::$default"

      - name: Build for testing
        id: build-test
        run: |
          set -e
          device=$(xcrun xctrace list devices 2>&1 \
            | grep -oE 'iPhone.*?[^\(]+' \
            | head -1 \
            | sed -E 's/ Simulator$//' \
            | xargs)
          file=$(ls *.xcworkspace 2>/dev/null || ls *.xcodeproj)
          type=$( [[ "$file" == *.xcworkspace ]] && echo workspace || echo project )
          xcodebuild build-for-testing \
            -scheme "${{ steps.list-schemes.outputs.scheme }}" \
            -$type "$file" \
            -destination "platform=iOS Simulator,name=$device"

      - name: Run tests
        run: |
          set -e
          device=$(xcrun xctrace list devices 2>&1 \
            | grep -oE 'iPhone.*?[^\(]+' \
            | head -1 \
            | sed -E 's/ Simulator$//' \
            | xargs)
          file=$(ls *.xcworkspace 2>/dev/null || ls *.xcodeproj)
          type=$( [[ "$file" == *.xcworkspace ]] && echo workspace || echo project )
          xcodebuild test-without-building \
            -scheme "${{ steps.list-schemes.outputs.scheme }}" \
            -$type "$file" \
            -destination "platform=iOS Simulator,name=$device"
